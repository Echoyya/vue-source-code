{"version":3,"file":"vue.js","sources":["../src/utils.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["export function isFunction(val) {\r\n  return typeof val === 'function'\r\n}\r\n\r\nexport function isObject(val) {\r\n  return typeof val === 'object' && val !== null\r\n}\r\nexport let isArray = Array.isArray","let oldArrayPrototype = Array.prototype; // 获取数组 老的原型方法\r\n\r\nexport let arrayMethods = Object.create(oldArrayPrototype); // 让arrayMethods 通过__proto__能获取到数组的方法\r\n\r\n// arrayMethods.__proto__ = oldArrayPrototype\r\n// arrayMethods.push = function \r\n\r\nlet methods = [ // 只有这七个方法 可以导致数组发生变化\r\n  'push',\r\n  'pop',\r\n  'shift',\r\n  'unshift',\r\n  'splice',\r\n  'sort',\r\n  'reverse',\r\n]\r\n\r\nmethods.forEach(method => {\r\n  arrayMethods[method] = function (...args) {\r\n    // 需要调用数组原生的方法\r\n    oldArrayPrototype[method].call(this,...args)\r\n\r\n    // 数组新增的属性， 要看一下 是不是对象，如果是对象，继续进行劫持\r\n    // todo 可以添加自己的逻辑 函数劫持 切片编程\r\n    let inserted = null;\r\n    let ob = this.__ob__;\r\n    switch (method) {\r\n      case 'splice':    // 删除 修改 添加 arr.splice(0,0,100,200)\r\n        inserted = args.slice(2); // splice 方法从第三个参数起。是增添的数据\r\n        break;\r\n      case 'push':\r\n      case 'unshift':\r\n        inserted = args; // 调用push 和 unshift 传递的参数就是新增的逻辑\r\n        break;\r\n    }\r\n    // inserted = [] 遍历数组  看一下是否需要进行劫持  \r\n    if(inserted) ob.observeArray(inserted);\r\n  }\r\n})\r\n// 并不会影响 数组原型的方法，只是重写了vue中 data数据中的 数组的原型方法","import { isArray, isObject } from \"../utils\";\r\nimport { arrayMethods } from \"./array\";\r\n\r\n/**\r\n * 1. 每个对象都有一个__proto__属性， 它指向所属类的原型 fn.__proto__ = Function.prototype\r\n * 2. 每个原型上都有一个constructor属性，指向函数本身 Function.prototype.constructor = Function\r\n */\r\nclass Observer{\r\n  constructor(value){\r\n    // 这样写会导致一个问题 死循环，解决： 不让__ob__ 被遍历\r\n    // value.__ob__ = this; // 给对象和数组添加一个自定义属性，(而且value 一定会是对象)\r\n\r\n    Object.defineProperty(value,'__ob__',{\r\n      value:this,\r\n      enumerable:false // 标识这个属性是不可枚举的，不会被循环到，默认值就是false\r\n    })\r\n    if(isArray(value)){\r\n      // 更改数组原型方法\r\n      value.__proto__ = arrayMethods;   // 重写数组的方法\r\n      this.observeArray(value);\r\n    }else{\r\n      this.walk(value)  // 核心就是循环对象\r\n    }\r\n  }\r\n  observeArray(data){ // 递归遍历数组，对数组内部的对象 再次重写， [[]],[{}]\r\n    // vm.arr[0].a = 100 响应式\r\n    // vm.arr0[] = 100  非响应式，不可通过索引修改\r\n    data.forEach(item=>observe(item));   // 数组内元素如果是引用类型 那么是响应式的\r\n\r\n  }\r\n  walk(data){\r\n    Object.keys(data).forEach(key=>{  // 要使用defineProperty 重新定义\r\n      defineReactive(data,key,data[key])\r\n    })\r\n  }\r\n}\r\n\r\n// vue2 应用了defineProperty需要一加载的时候 就进行递归操作，所以好性能，如果层次过深也会浪费性能\r\n// 1.性能优化的原则：\r\n// 1) 不要把所有的数据都放在data中，因为所有的数据都会增加get和set\r\n// 2) 不要写数据的时候 层次过深， 尽量扁平化数据 \r\n// 3) 不要频繁获取数据，可以借用中间变量\r\n// 4) 如果数据不需要响应式 可以使用Object.freeze 冻结属性 \r\n\r\nfunction defineReactive(obj,key,value){    // vue2 慢的原因主要在这个方法中，递归\r\n  observe(value);  // 递归进行观测\r\n  Object.defineProperty(obj,key,{   \r\n    get(){\r\n      return value;    // 形成闭包，会向上层作用域查找value，因此作用域不会销毁\r\n    },\r\n    set(newValue){\r\n      if(value === newValue) return;\r\n      observe(newValue);    // 如果修改以后的值，变为对象，而此时新对象没有被劫持，需要再次进行观测\r\n      console.log('修改');\r\n      value = newValue;\r\n    }\r\n  })\r\n}\r\nexport function observe(value) {\r\n  if(!isObject(value)) return;  // 如果 value 不是对象，就不用进行观测\r\n\r\n  if(value.__ob__) return;  // 一个对象不需要重新被观测\r\n\r\n  // 需要对 对象进行观测，最外层必须是一个对象，不能是数组\r\n  // 如果一个数据已经被观测过了，就不要再进行观测了，用类来实现，观测过的就增加一个标识，在观测时 可以先检测是否观测过，观测过就跳过观测\r\n  return new Observer(value)\r\n}","import { observe } from \"./observe\";   // rollup-plugin-node-resolve\r\nimport { isFunction } from \"./utils\";\r\nexport function initState(vm) {\r\n  const opts = vm.$options;\r\n\r\n  if (opts.data) {\r\n    initData(vm);\r\n  }\r\n}\r\nfunction proxy(vm, key, source){ // 取值的时候做代理，而不是把_data 属性赋给vm，而且直接赋值会有命名冲突的问题\r\n  Object.defineProperty(vm, key, {\r\n    get(){\r\n      return vm[source][key]\r\n    },\r\n    set(newValue){\r\n      vm[source][key] = newValue\r\n    }\r\n  })\r\n}\r\n\r\nfunction initData(vm) {\r\n  let data = vm.$options.data; // 用户传入的数据 \r\n  // 如果用户传递的是一个函数，则取函数的返回值作为对象。 如果就是对象就直接使用该对象即可\r\n  // 只有根实例可以 data 是一个对象\r\n\r\n  // data 和 vm._data 引用的是同一个空间 -》 data被劫持了  vm._data也被劫持\r\n  data = vm._data = isFunction(data) ? data.call(vm) : data;   // _data 已经是响应式的了\r\n\r\n  // 需要将data变成响应式的 Object.defineProperty\r\n  // 响应式 观测数据的入口方法，观测对象中的属性\r\n  observe(data);\r\n  for (let key in data) {   // vm.message  => vm._data,message\r\n    proxy(vm, key, '_data') //代理的是vm上的取值和设置值。和vm._data 没关系\r\n  }\r\n}","import { initState } from \"./state\";\r\n\r\nexport function initMixin(Vue) {\r\n  // 后续组件化开发时，Vue.extend 可以好擦UN宫颈癌你一个子组件，同样可以继承Vue，调用_init方法\r\n  Vue.prototype._init = function (options) {\r\n    const vm = this;\r\n\r\n    // 将用户的选项 放在vm上，以便在其他方法中可以获取到options\r\n    vm.$options = options; // 为了后续扩展的方法，都可以湖区到options选项\r\n\r\n    //统一管理所有的数据 ，data props watch computed\r\n    initState(vm)\r\n\r\n    if (vm.$options.el) {\r\n      console.log('页面要挂载');\r\n    }\r\n  }\r\n}","import { initMixin } from './init'\r\n// Vue 实现采用原型模式，所有的功能都通过原型扩展的方式来添加\r\nfunction Vue(options) {\r\n  this._init(options); // vue 初始化功能\r\n}\r\ninitMixin(Vue)\r\n\r\n// 导出Vue\r\nexport default Vue\r\n\r\n// 1.new Vue 会调用_init方法进行初始化操作\r\n// 2.会将用户的选项放到 vm.$options上\r\n// 3.会对当前属性上搜素有没有data 数据   initState\r\n// 4.有data 判断data是不是一个函数 ，如果是函数取返回值 initData\r\n// 5.observe 去观测data中的数据 和 vm没关系，说明data已经变成了响应式\r\n// 6.vm上想取值也能取到data中的数据 vm._data = data 这样用户能取到data了  vm._data\r\n// 7.用户觉得有点麻烦 vm.xxx => vm._data\r\n// 8.如果更新对象不存在的属性，会导致视图不更新， 如果是数组更新索引和长度不会触发更新\r\n// 9.如果是替换成一个新对象，新对象会被进行劫持，如果是数组存放新内容 push unshift() 新增的内容也会被劫持\r\n// 通过__ob__ 进行标识这个对象被监控过  （在vue中被监控的对象身上都有一个__ob__ 这个属性）\r\n// 10如果你就想改索引 可以使用$set方法 内部就是splice()"],"names":["isFunction","val","isObject","isArray","Array","oldArrayPrototype","prototype","arrayMethods","Object","create","methods","forEach","method","args","call","inserted","ob","__ob__","slice","observeArray","Observer","constructor","value","defineProperty","enumerable","__proto__","walk","data","item","observe","keys","key","defineReactive","obj","get","set","newValue","console","log","initState","vm","opts","$options","initData","proxy","source","_data","initMixin","Vue","_init","options","el"],"mappings":"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"}